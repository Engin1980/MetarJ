/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eng.metarJava;

import eng.metarJava.enums.*;
import eng.metarJava.exception.NullArgumentException;
import eng.metarJava.support.DayHourMinute;
import eng.metarJava.support.ReadOnlyList;
import java.util.List;

/**
 * Represents METAR/SPECI report.
 *
 * @author Marek Vajgl
 */
public class Report {

  private ReportType type = ReportType.METAR;

  /**
   * Gets type of the report. METAR and SPECI types are supported. Mandatory.
   *
   * @return Report type. This value is mandatory. Default value is {@link eng.metarJava.enums.ReportType#METAR METAR}.
   * @see eng.metarJava.enums.ReportType
   */
  public ReportType getType() {
    return type;
  }

  /**
   * See {@linkplain  #getType()}.
   *
   * @param type
   */
  public void setType(ReportType type) {
    this.type = type;
  }

  /**
   * COR
   */
  private boolean correction = false;

  /**
   * Flag if a report is a correction. Mandatory. Default value is false.
   *
   * @return
   */
  public boolean isCorrection() {
    return correction;
  }

  /**
   * See {@linkplain #isCorrection() }
   *
   * @see #isCorrection()
   * @param correction
   */
  public void setCorrection(boolean correction) {
    this.correction = correction;
  }

  private String icao = "////";

  /**
   * Represents ICAO code of the station. Must contain exacly 4 characters. Default value is "////".
   *
   * @return
   */
  public String getIcao() {
    return icao;
  }

  /**
   * See {@linkplain #getIcao() }.
   *
   * @param icao
   * @throws NullArgumentException If parameter is null.
   * @throws IllegalArgumentException if parameter does not contain four characters.
   * @throws IllegalArgumentException if parameter is stupid.
   */
  public void setIcao(String icao) {
    if (icao == null) {
      throw new NullArgumentException("icao");
    }
    if (icao.length() != 4) {
      throw new IllegalArgumentException("Icao length must be 4 characters.");
    }
    this.icao = icao;
  }

  private DayHourMinute dayTime = new DayHourMinute(1, 1, 1);

  /**
   * Represents day, hour and minute of the report in the ZULU time. Mandatory. Default value is 000000Z.
   *
   * @return
   */
  public DayHourMinute getDayTime() {
    return dayTime;
  }

  /**
   * See {@linkplain #getDayTime() }.
   *
   * @param time Value. Cannot be null.
   * @see #getDayTime()
   * @throws NullArgumentException if time is null.
   */
  public void setDayTime(DayHourMinute time) {
    if (time == null) {
      throw new NullArgumentException("time");
    }
    this.dayTime = time;
  }

  /**
   * NIL
   */
  private boolean nil = false;

  /**
   * Represents if report is NIL report. If so, all other fields can be set anyhow, but this report should be processed as NIL.
   * Mandatory. Default value is "false".
   *
   * @return
   */
  public boolean isNil() {
    return nil;
  }

  /**
   * See {@linkplain #isNil() }.
   *
   * @param nil
   */
  public void setNil(boolean nil) {
    this.nil = nil;
  }

  /**
   * AUTO
   */
  private boolean auto = false;

  /**
   * Returns true if report is AUTO - report generated by automated station. Mandatory. Default value is false.
   *
   * @return
   */
  public boolean isAuto() {
    return auto;
  }

  /**
   * See {@linkplain #isAuto() }.
   *
   * @param auto
   */
  public void setAuto(boolean auto) {
    this.auto = auto;
  }

  private WindInfo wind = null;

  /**
   * Represents wind. Mandatory. Default value is null, that is no wind reported, like "/////KT". Wind can be represented as calm,
   * normal, gusting and varying using {@linkplain CloudInfo} class.
   *
   * @return Object representing wind.
   */
  public WindInfo getWind() {
    return wind;
  }

  /**
   * See {@linkplain #getWind()}
   *
   * @param wind
   * @see #getWind()
   */
  public void setWind(WindInfo wind) {
    this.wind = wind;
  }

  private VisibilityInfo visibility = VisibilityInfo.createCAVOK();

  /**
   * Represents visibility information of report. Visibility is represented in meters, or CAVOK info when nothing to report. See
   * {@linkplain VisibilityInfo}. Mandatory. Default value is CAVOK.
   *
   * @return
   */
  public VisibilityInfo getVisibility() {
    return visibility;
  }

  /**
   * See {@linkplain #getVisibility() }. Mandatory.
   *
   * @param visibility
   * @throws NullArgumentException if [visibility] is null.
   */
  public void setVisibility(VisibilityInfo visibility) {
    if (visibility == null) {
      throw new NullArgumentException("visibility");
    }
    this.visibility = visibility;
  }

  private ReadOnlyList<RunwayVisualRange> runwayVisualRanges = null;

  /**
   * Represents specific runway visual ranges over station - that is visiblity over specified runway, like R24/0300V0500. Optional.
   * Default value is null.
   *
   * @return
   */
  public ReadOnlyList<RunwayVisualRange> getRunwayVisualRanges() {
    return runwayVisualRanges;
  }

  /**
   * See {@linkplain #getRunwayVisualRanges() }.
   *
   * @param value
   */
  public void setRunwayVisualRanges(List<RunwayVisualRange> value) {
    this.setRunwayVisualRanges(new ReadOnlyList(value));
  }
  
  /**
   * See {@linkplain #getRunwayVisualRanges() }.
   *
   * @param value
   */
  public void setRunwayVisualRanges(ReadOnlyList<RunwayVisualRange> value) {
    this.runwayVisualRanges = value;
  }

  private ReadOnlyList<PhenomenaInfo> phenomenas = null;

  /**
   * Represents phenomenas over station. If containing items, represents phenomena over station. If empty or null, means no significant
   * phenomena over the station. Default value is null.
   *
   * @return
   */
  public ReadOnlyList<PhenomenaInfo> getPhenomenas() {
    return phenomenas;
  }

  public void setPhenomenas(List<PhenomenaInfo> value) {
    this.setPhenomenas(new ReadOnlyList<>(value));
  }

  public void setPhenomenas(ReadOnlyList<PhenomenaInfo> value) {
    this.phenomenas = value;
  }

  private CloudInfo clouds = null;

  /**
   * Represents cloud info or null if no info presented. If null, value is not presented in report. Other options are NSC - no
   * significant clouds, NCD - no clouds detected, VVxxx - vertical visibility with specified altitude in hundreds feet and one or more
   * cloud reports in xxxyyy format, like OVC030. Optional. Default value is null.
   *
   * @return
   */
  public CloudInfo getClouds() {
    return clouds;
  }

  /**
   * See {@linkplain #getClouds() }.
   *
   * @param clouds
   */
  public void setClouds(CloudInfo clouds) {
    this.clouds = clouds;
  }

  private int temperature = 0;

  /**
   * Gets temperature in celsius degrees. Mandatory. Default value is 0.
   *
   * @return
   */
  public int getTemperature() {
    return temperature;
  }

  /**
   * See {@linkplain #getTemperature() }.
   *
   * @param temperature
   */
  public void setTemperature(int temperature) {
    this.temperature = temperature;
  }

  private int dewPoint = 0;

  /**
   * Gets dew point in celsius degrees. Mandatory. Default value is 0.
   *
   * @return
   */
  public int getDewPoint() {
    return dewPoint;
  }

  /**
   * See {@linkplain #getDewPoint() }.
   *
   * @param dewPoint
   */
  public void setDewPoint(int dewPoint) {
    this.dewPoint = dewPoint;
  }

  private int pressureInHpa = 1013;

  /**
   * Gets pressure in Hpa. Mandatory. Default value is 1013.
   *
   * @return
   */
  public int getPressureInHpa() {
    return pressureInHpa;
  }

  /**
   * See {@linkplain #getPressureInHpa() }.
   *
   * @param pressureInHpa
   */
  public void setPressureInHpa(int pressureInHpa) {
    this.pressureInHpa = pressureInHpa;
  }

  private ReadOnlyList<PhenomenaInfo> recentPhenomenas = null;

  /**
   * Represents recent phenomenas over station. If value is null or contains empty list, means no recent phenomena. Otherwise use list
   * with elements. Recent phenomenas cannot have intensity other than moderate (see {@link eng.metarJava.enums.PhenomenaIntensity})
   * and cannot have inVicinity - VC - phenomenas. Optional. Default value is null.
   *
   * @return
   */
  public ReadOnlyList<PhenomenaInfo> getRecentPhenomenas() {
    return recentPhenomenas;
  }

  /**
   * See {@linkplain  #getRecentPhenomenas() }. No recent phenomena can have non-moderate intensity or be in vicinity.
   *
   * @param value
   * @throws IllegalArgumentException if some phenomena in list has intensity different from {@linkplain PhenomenaIntensity#moderate}.
   * @throws IllegalArgumentException if some phenomena in list has {@linkplain PhenomenaInfo#isInVicinity() } flag set to true.
   */
  public void setRecentPhenomenas(List<PhenomenaInfo> value) {
    setRecentPhenomenas(new ReadOnlyList(value));
  }

  /**
   * See {@linkplain  #getRecentPhenomenas() }. No recent phenomena can have non-moderate intensity or be in vicinity.
   *
   * @param value
   * @throws IllegalArgumentException if some phenomena in list has intensity different from {@linkplain PhenomenaIntensity#moderate}.
   * @throws IllegalArgumentException if some phenomena in list has {@linkplain PhenomenaInfo#isInVicinity() } flag set to true.
   */
  public void setRecentPhenomenas(ReadOnlyList<PhenomenaInfo> value) {
    if (value != null) {
      for (PhenomenaInfo pi : value) {
        if (pi.getIntensity() != PhenomenaIntensity.moderate) {
          throw new IllegalArgumentException("No recent phenomena can have intensity different from moderate.");
        }
        if (pi.isInVicinity()) {
          throw new IllegalArgumentException("No recent phenomena can have flag [isInVicinity] set.");
        }

      }
    }
    this.recentPhenomenas = new ReadOnlyList(value);
  }

  private RunwayWindshearInfo runwayWindshears = null;

  /**
   * Represents reported windshear over runways over the station. Can be set for all runways - WS ALL RWY, or for specific runway - see
   * description of {@linkplain RunwayWindshearInfo}. If null, means no windshear is reported. Optional. Default value is null.
   *
   * @return
   */
  public RunwayWindshearInfo getRunwayWindshears() {
    return runwayWindshears;
  }

  /**
   * See {@linkplain #getRunwayWindshears() }.
   *
   * @param runwayWindshear
   */
  public void setRunwayWindshears(RunwayWindshearInfo runwayWindshear) {
    this.runwayWindshears = runwayWindshear;
  }

  private RunwayStatesInfo runwayStatesInfo = null;

  /**
   * Represents info about runways states. If null, no state reported for any runway. Other filled with {@linkplain RunwayStatesInfo}
   * instance with data for specific runways. Optional. Default value is null.
   *
   * @return
   */
  public RunwayStatesInfo getRunwayStatesInfo() {
    return runwayStatesInfo;
  }

  /**
   * See {@linkplain #getRunwayStatesInfo() }.
   *
   * @param runwayStatesInfo
   */
  public void setRunwayStatesInfo(RunwayStatesInfo runwayStatesInfo) {
    this.runwayStatesInfo = runwayStatesInfo;
  }

  private TrendInfo trendInfo = TrendInfo.createNOSIG();

  /**
   * Represents weather trend, typically NOSIG, BECMG, TEMPO, etc. This field should(!) be set, however, in some countries it is
   * ommited. If set, see instance of {@linkplain TrendInfo} for detailed description. Optional, but reccomended. Default value is
   * NOSIG.
   *
   * @return
   */
  public TrendInfo getTrendInfo() {
    return trendInfo;
  }

  /**
   * See {@linkplain #getTrendInfo() }.
   *
   * @param trendInfo
   */
  public void setTrendInfo(TrendInfo trendInfo) {
    this.trendInfo = trendInfo;
  }

  private String remark = null;

  /**
   * Represents remark after the report text. If no remark, null. Optional. Default value is null.
   *
   * @return
   */
  public String getRemark() {
    return remark;
  }

  /**
   * See {@linkplain  #getRemark() }.
   *
   * @param remark
   */
  public void setRemark(String remark) {
    this.remark = remark;
  }
}
